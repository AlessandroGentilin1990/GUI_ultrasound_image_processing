import cv2
import os
import threading
import tkinter as tk
from tkinter import filedialog, messagebox


class VideoSplitterApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Video Splitter")
        self.master.configure(bg="black")   # Sfondo nero
        self.master.geometry("400x200")     # Dimensione finestra
        self.master.resizable(False, False)

        # Percorso video selezionato
        self.video_path = None

        # Stile pulsanti
        btn_style = {
            "bg": "#1e1e1e",
            "fg": "white",
            "activebackground": "#333333",
            "activeforeground": "white",
            "relief": "flat",
            "font": ("Consolas", 12, "bold"),
            "width": 20,
            "height": 2
        }

        # Bottone selezione video
        self.btn_select = tk.Button(master, text="Select video", command=self.select_video, **btn_style)
        self.btn_select.pack(pady=15)

        # Etichetta con percorso del video
        self.lbl_video = tk.Label(master, text="No videos selected", bg="black", fg="white", font=("Consolas", 10))
        self.lbl_video.pack(pady=5)

        # Bottone split
        self.btn_split = tk.Button(master, text="Split!", state=tk.DISABLED, command=self.start_split, **btn_style)
        self.btn_split.pack(pady=15)

    def select_video(self):
        file_path = filedialog.askopenfilename(
            title="Select an MP4 video file",
            filetypes=[("File MP4", "*.mp4")]
        )
        if file_path:
            self.video_path = file_path
            self.lbl_video.config(text=f"Video: {os.path.basename(file_path)}")
            self.btn_split.config(state=tk.NORMAL)

    def start_split(self):
        # Lancio il processo in un thread separato per non bloccare la GUI
        threading.Thread(target=self.split_video).start()

    def split_video(self):
        if not self.video_path:
            messagebox.showerror("Error", "No videos selected.")
            return

        base_dir = os.path.dirname(self.video_path)
        filename = os.path.splitext(os.path.basename(self.video_path))[0]

        # Cartella di output
        output_dir = os.path.join(base_dir, filename)
        os.makedirs(output_dir, exist_ok=True)

        cap = cv2.VideoCapture(self.video_path)
        frame_count = 0

        while True:
            ret, frame = cap.read()
            if not ret:
                break

            frame_count += 1
            frame_filename = os.path.join(output_dir, f"frame_{frame_count:06d}.jpg")
            cv2.imwrite(frame_filename, frame)

        cap.release()
        messagebox.showinfo("Completed", f"Extraction completed.\n{frame_count} frames saved in:\n{output_dir}")


if __name__ == "__main__":
    root = tk.Tk()
    app = VideoSplitterApp(root)
    root.mainloop()



# import cv2
# import os
# from tkinter import Tk, filedialog
#
# def main():
#     # Nascondo la finestra principale di Tkinter
#     root = Tk()
#     root.withdraw()
#
#     # Finestra per scegliere il file video
#     video_path = filedialog.askopenfilename(
#         title="Seleziona un file video MP4",
#         filetypes=[("File MP4", "*.mp4")]
#     )
#
#     if not video_path:
#         print("Nessun file selezionato, uscita.")
#         return
#
#     # Ricavo directory e nome del file senza estensione
#     base_dir = os.path.dirname(video_path)
#     filename = os.path.splitext(os.path.basename(video_path))[0]
#
#     # Creo la cartella con lo stesso nome del video
#     output_dir = os.path.join(base_dir, filename)
#     os.makedirs(output_dir, exist_ok=True)
#
#     # Apro il video
#     cap = cv2.VideoCapture(video_path)
#     frame_count = 0
#
#     while True:
#         ret, frame = cap.read()
#         if not ret:
#             break  # fine del video
#
#         frame_count += 1
#         # Nome file progressivo
#         frame_filename = os.path.join(output_dir, f"frame_{frame_count:06d}.jpg")
#         cv2.imwrite(frame_filename, frame)
#
#     cap.release()
#     print(f"Estrazione completata. {frame_count} frame salvati in: {output_dir}")
#
# if __name__ == "__main__":
#     main()
